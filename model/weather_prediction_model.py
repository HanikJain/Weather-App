# -*- coding: utf-8 -*-
"""weather-prediction-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m15di-5kJnZLej32zmsWQvecb28l_NlR
"""

# from google.colab import drive 
# drive.mount('/content/drive')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
import os

df = pd.read_csv(os.path.abspath("./weatherHistory.csv"))


def updateSummary():
  s_list = df['Summary'].tolist()

  for i in range(len(s_list)):
    s = s_list[i]
    if (s ==  'Mostly Cloudy' or s == 'Partly Cloudy' or s == 'Breezy and Mostly Cloudy' or s == 'Windy and Mostly Cloudy'or s == 'Dry and Mostly Cloudy' ):
      s_list[i] = 'Cloudy'
    elif (s == "Overcast" or s == 'Breezy and Overcast'or s == 'Windy and Overcast' or s ==  'Humid and Overcast') :
      s_list[i] = 'Overcast'
    elif (s == 'Dry and Partly Cloudy' or s == 'Dry'or s == 'Windy and Dry' or s ==  'Breezy and Dry'):
      s_list[i] = "Dry"   
    elif (s == 'Light Rain' or s == 'Drizzle' or s == 'Rain') :
      s_list[i] = "Rain"
    elif ( s =='Windy and Partly Cloudy'  or s == 'Dangerously Windy and Partly Cloudy'  or s == 'Windy')   :
      s_list[i] = 'Windy'
    elif ( s == 'Breezy and Partly Cloudy' or s == 'Breezy'):
      s_list[i] = 'Breezy'
    elif ( s == 'Humid and Partly Cloudy' or s == 'Humid and Mostly Cloudy' ):
      s_list[i] = 'Humid'
    elif (s == 'Clear'):
      s_list[i] = 'Clear'
    elif (s == 'Foggy'  or s ==  'Windy and Foggy' or s == 'Breezy and Foggy'):
      s_list[i] = 'Foggy'


  df1 = pd.DataFrame (s_list, columns = ['Summary'])
  df['Summary'] = df1['Summary']
  return df['Summary']

def dataPreprocessing():
  input = df.drop(['Formatted Date', 'Summary', 'Precip Type', 'Apparent Temperature (C)', "Wind Speed (km/h)", 'Loud Cover', 'Daily Summary'], axis='columns')
  return input

def trainModel (input, target, Classifier):
  X_train, X_test, y_train, y_test = train_test_split(input, target, test_size = 0.7)
  Classifier.fit(X_train, y_train)
  Classifier.score(X_train, y_train)
  return Classifier
  

Classifier = GaussianNB()
model = trainModel(dataPreprocessing(), updateSummary(), Classifier)



